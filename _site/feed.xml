<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-10T22:41:49+08:00</updated><id>http://localhost:4000/</id><title type="html">Panicall’s Blog</title><subtitle>security knowledge, vulnerabilities details, fuzzing method, etc.</subtitle><entry><title type="html">CVE-2018-4283: IOGraphics, OOB Read</title><link href="http://localhost:4000/vulnerabilities/2018/07/10/CVE-2018-4283.html" rel="alternate" type="text/html" title="CVE-2018-4283: IOGraphics, OOB Read" /><published>2018-07-10T21:31:00+08:00</published><updated>2018-07-10T21:31:00+08:00</updated><id>http://localhost:4000/vulnerabilities/2018/07/10/CVE-2018-4283</id><content type="html" xml:base="http://localhost:4000/vulnerabilities/2018/07/10/CVE-2018-4283.html">&lt;h1 id=&quot;description&quot;&gt;Description&lt;/h1&gt;
&lt;p&gt;There is an OOB read vulnerability exists in IOGraphics due to wrong create/release logic.&lt;/p&gt;

&lt;h1 id=&quot;environment&quot;&gt;Environment&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;OS: 		    macOS 10.13.5&lt;/li&gt;
  &lt;li&gt;Module:	    IOGraphics.kext&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;analysis&quot;&gt;Analysis&lt;/h1&gt;
&lt;p&gt;In IDState class, the CreateID method can create IDs in different ways according to parameter ‘options’:&lt;br /&gt;
&lt;img src=&quot;/_asserts/createid.png&quot; alt=&quot;createid&quot; /&gt;&lt;br /&gt;
It can either call reserveRequested or allocID. The 2 methods store id into different queues, the fSpecifiedIDsData and fRetainIDsData.
But when release the previous created id, the logic about choosing queue doesn’t match the one in CreateID. The logic exists in method locateID:&lt;br /&gt;
&lt;img src=&quot;/_asserts/locateid.png&quot; alt=&quot;createid&quot; /&gt;&lt;br /&gt;
It chooses queue according to the id value , not the options any more. So we can go to the wrong queue with a very big id value, e.g. -2. Finally the function getID uses the very big id value as its index:&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/_asserts/getid.png&quot; alt=&quot;createid&quot; /&gt; &lt;br /&gt;
Here we get out of boundary read in function getBytesNoCopy. This may lead to LPE, memory corruption …&lt;/p&gt;</content><author><name></name></author><category term="CVE" /><summary type="html">Description There is an OOB read vulnerability exists in IOGraphics due to wrong create/release logic.</summary></entry></feed>